@model CheckoutViewModel
@{
    ViewData["Title"] = "Checkout";
    Layout = "_Layout";
}

@section Styles {
    <style>
        .form-group {
            position: relative;
        }

        .form-input {
            background-color: #374151; /* bg-gray-700 */
            border: 1px solid #4B5563; /* border-gray-600 */
            color: white;
            width: 100%;
            padding: 0.75rem 0.75rem 0.25rem 0.75rem;
            border-radius: 0.375rem;
            outline: none;
            transition: border-color 0.2s;
        }

            .form-input:focus {
                border-color: #6366F1; /* focus:border-indigo-500 */
            }

        .form-label {
            position: absolute;
            left: 0.75rem;
            top: 0.75rem;
            color: #9CA3AF; /* text-gray-400 */
            pointer-events: none;
            transition: all 0.2s ease-out;
            transform-origin: left top;
        }

        .form-input:focus + .form-label,
        .form-input:not(:placeholder-shown) + .form-label {
            transform: translateY(-0.6rem) scale(0.75);
            color: #A5B4FC; /* text-indigo-300 */
        }

        .payment-overlay {
            background-color: rgba(17, 24, 39, 0.9);
            backdrop-filter: blur(5px);
            transition: opacity 0.4s ease-in-out;
        }

        .spinner {
            border-color: rgba(79, 70, 229, 0.2);
            border-top-color: #A5B4FC;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        .checkmark-circle {
            stroke-dasharray: 166;
            stroke-dashoffset: 166;
            animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
        }

        .checkmark-check {
            transform-origin: 50% 50%;
            stroke-dasharray: 48;
            stroke-dashoffset: 48;
            animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
        }

        @@keyframes stroke {
            100% {
                stroke-dashoffset: 0;
            }
        }

        .checkmark {
            margin: auto;
            display: block;
        }

        #success-container {
            padding: 1rem;
        }

        #spinner-container {
            text-align: center;
        }

        .spinner {
            margin: auto;
        }

            .spinner + p {
                text-align: center;
                margin-top: 1rem;
            }

        .checkmark-circle {
            r: 24;
        }

    </style>
}

<div class="container mx-auto px-6 py-16 min-h-screen">
    <div class="pt-24 max-w-4xl mx-auto">
        <h1 class="text-4xl font-extrabold text-center">Final Step: Secure Checkout</h1>
        <p class="text-gray-400 text-center mt-2">Complete your booking for @Model.MovieTitle</p>

        <div class="mt-12 grid grid-cols-1 md:grid-cols-2 gap-12">
            <div class="bg-gray-800 p-8 rounded-xl">
                <h3 class="text-2xl font-bold mb-6">Order Summary</h3>
                <div class="space-y-4">
                    <div class="flex justify-between"><span class="text-gray-400">Movie:</span> <span class="font-semibold">@Model.MovieTitle</span></div>
                    <div class="flex justify-between"><span class="text-gray-400">Showtime:</span> <span class="font-semibold">@Model.Showtime</span></div>
                    <div class="flex justify-between"><span class="text-gray-400">Seats:</span> <span class="font-semibold">@Model.SelectedSeats</span></div>
                    <div class="border-t border-gray-700 my-4"></div>
                    <div class="flex justify-between text-xl"><span class="text-gray-400">Total:</span> <span class="font-bold text-indigo-400">$@Model.TotalPrice.ToString("F2")</span></div>
                </div>
            </div>

            <div class="bg-gray-800 p-8 rounded-xl">
                <h3 class="text-2xl font-bold mb-6">Payment Details</h3>
                <form id="payment-form" class="space-y-6">
                    @Html.AntiForgeryToken()
                    <input type="hidden" asp-for="MovieTitle" />
                    <input type="hidden" asp-for="Showtime" />
                    <input type="hidden" asp-for="SelectedSeats" />
                    <input type="hidden" asp-for="TotalPrice" />

                    <div class="form-group">
                        <input asp-for="CardHolderName" class="form-input" placeholder=" ">
                        <label asp-for="CardHolderName" class="form-label"></label>
                    </div>
                    <div class="form-group">
                        <input asp-for="CardNumber" class="form-input" placeholder=" " maxlength="16">
                        <label asp-for="CardNumber" class="form-label"></label>
                    </div>
                    <div class="grid grid-cols-2 gap-6">
                        <div class="form-group">
                            <input asp-for="ExpiryDate" class="form-input" placeholder=" " maxlength="5">
                            <label asp-for="ExpiryDate" class="form-label"></label>
                        </div>
                        <div class="form-group">
                            <input asp-for="Cvc" class="form-input" placeholder=" " maxlength="4">
                            <label asp-for="Cvc" class="form-label"></label>
                        </div>
                    </div>
                    <div class="pt-4">
                        <button type="submit" class="w-full bg-indigo-600 text-white font-bold py-3 px-8 rounded-full text-lg transition-transform transform hover:scale-105">Pay $@Model.TotalPrice.ToString("F2")</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div id="payment-overlay" class="payment-overlay fixed inset-0 z-50 flex flex-col items-center justify-center text-white opacity-0 pointer-events-none">
    <div id="spinner-container">
        <div class="spinner w-16 h-16 rounded-full border-4"></div>
        <p class="mt-4 text-xl">Processing Payment...</p>
    </div>
    <div id="success-container" class="text-center hidden">
        <svg class="checkmark mx-auto" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52" width="100px" height="100px">
            <circle class="checkmark-circle" cx="26" cy="26" r="25" fill="none" stroke="#4F46E5" stroke-width="4" />
            <path class="checkmark-check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" stroke="#A5B4FC" stroke-width="5" />
        </svg>
        <h2 class="text-3xl font-bold mt-4">Payment Confirmed!</h2>
        <p class="text-gray-400 mt-2">Your tickets have been sent to your account email.</p>
        <a asp-controller="Home" asp-action="Index" class="mt-8 inline-block bg-indigo-600 text-white font-semibold py-2 px-6 rounded-lg">Back to Home</a>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('payment-form').addEventListener('submit', async function (e) {
            e.preventDefault();

            const overlay = document.getElementById('payment-overlay');
            const spinner = document.getElementById('spinner-container');
            const success = document.getElementById('success-container');
            const form = e.target;

            const cardName = form.querySelector("#CardHolderName").value;
            const cardNumber = form.querySelector("#CardNumber").value;
            const expiry = form.querySelector("#ExpiryDate").value;
            const cvc = form.querySelector("#Cvc").value;

            if (!cardName || cardNumber.length < 16 || expiry.length < 5 || cvc.length < 3) {
                alert("Please fill out all payment fields correctly.");
                return;
            }

            overlay.classList.remove('opacity-0', 'pointer-events-none');
            spinner.classList.remove('hidden');
            success.classList.add('hidden');

            try {
                const formData = new FormData(form);
                const response = await fetch("@Url.Action("ProcessPayment", "Booking")", {
                    method: 'POST',
                    body: formData,
                });

                if (!response.ok) {
                    throw new Error("Payment processing failed.");
                }

                const result = await response.json();

                if (result.success) {
                    spinner.classList.add('hidden');
                    success.classList.remove('hidden');
                } else {
                    throw new Error("Payment was not successful.");
                }
            } catch (error) {
                console.error('Payment Error:', error);
                spinner.classList.add('hidden');
                overlay.classList.add('opacity-0', 'pointer-events-none');
                alert('An error occurred during payment. Please try again.');
            }
        });
    </script>
}